{
  "version": 3,
  "sources": ["../../fraction.js/dist/fraction.mjs"],
  "sourcesContent": ["'use strict';\n\n/**\n *\n * This class offers the possibility to calculate fractions.\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\n *\n * Array/Object form\n * [ 0 => <numerator>, 1 => <denominator> ]\n * { n => <numerator>, d => <denominator> }\n *\n * Integer form\n * - Single integer value as BigInt or Number\n *\n * Double form\n * - Single double value as Number\n *\n * String form\n * 123.456 - a simple double\n * 123/456 - a string fraction\n * 123.'456' - a double with repeating decimal places\n * 123.(456) - synonym\n * 123.45'6' - a double with repeating last place\n * 123.45(6) - synonym\n *\n * Example:\n * let f = new Fraction(\"9.4'31'\");\n * f.mul([-4, 3]).div(4.9);\n *\n */\n\n// Set Identity function to downgrade BigInt to Number if needed\nif (typeof BigInt === 'undefined') BigInt = function (n) { if (isNaN(n)) throw new Error(\"\"); return n; };\n\nconst C_ZERO = BigInt(0);\nconst C_ONE = BigInt(1);\nconst C_TWO = BigInt(2);\nconst C_FIVE = BigInt(5);\nconst C_TEN = BigInt(10);\n\n// Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\n// Example: 1/7 = 0.(142857) has 6 repeating decimal places.\n// If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\nconst MAX_CYCLE_LEN = 2000;\n\n// Parsed data to avoid calling \"new\" all the time\nconst P = {\n  \"s\": C_ONE,\n  \"n\": C_ZERO,\n  \"d\": C_ONE\n};\n\nfunction assign(n, s) {\n\n  try {\n    n = BigInt(n);\n  } catch (e) {\n    throw InvalidParameter();\n  }\n  return n * s;\n}\n\nfunction trunc(x) {\n  return typeof x === 'bigint' ? x : Math.floor(x);\n}\n\n// Creates a new Fraction internally without the need of the bulky constructor\nfunction newFraction(n, d) {\n\n  if (d === C_ZERO) {\n    throw DivisionByZero();\n  }\n\n  const f = Object.create(Fraction.prototype);\n  f[\"s\"] = n < C_ZERO ? -C_ONE : C_ONE;\n\n  n = n < C_ZERO ? -n : n;\n\n  const a = gcd(n, d);\n\n  f[\"n\"] = n / a;\n  f[\"d\"] = d / a;\n  return f;\n}\n\nfunction factorize(num) {\n\n  const factors = {};\n\n  let n = num;\n  let i = C_TWO;\n  let s = C_FIVE - C_ONE;\n\n  while (s <= n) {\n\n    while (n % i === C_ZERO) {\n      n /= i;\n      factors[i] = (factors[i] || C_ZERO) + C_ONE;\n    }\n    s += C_ONE + C_TWO * i++;\n  }\n\n  if (n !== num) {\n    if (n > 1)\n      factors[n] = (factors[n] || C_ZERO) + C_ONE;\n  } else {\n    factors[num] = (factors[num] || C_ZERO) + C_ONE;\n  }\n  return factors;\n}\n\nconst parse = function (p1, p2) {\n\n  let n = C_ZERO, d = C_ONE, s = C_ONE;\n\n  if (p1 === undefined || p1 === null) { // No argument\n    /* void */\n  } else if (p2 !== undefined) { // Two arguments\n\n    if (typeof p1 === \"bigint\") {\n      n = p1;\n    } else if (isNaN(p1)) {\n      throw InvalidParameter();\n    } else if (p1 % 1 !== 0) {\n      throw NonIntegerParameter();\n    } else {\n      n = BigInt(p1);\n    }\n\n    if (typeof p2 === \"bigint\") {\n      d = p2;\n    } else if (isNaN(p2)) {\n      throw InvalidParameter();\n    } else if (p2 % 1 !== 0) {\n      throw NonIntegerParameter();\n    } else {\n      d = BigInt(p2);\n    }\n\n    s = n * d;\n\n  } else if (typeof p1 === \"object\") {\n    if (\"d\" in p1 && \"n\" in p1) {\n      n = BigInt(p1[\"n\"]);\n      d = BigInt(p1[\"d\"]);\n      if (\"s\" in p1)\n        n *= BigInt(p1[\"s\"]);\n    } else if (0 in p1) {\n      n = BigInt(p1[0]);\n      if (1 in p1)\n        d = BigInt(p1[1]);\n    } else if (typeof p1 === \"bigint\") {\n      n = p1;\n    } else {\n      throw InvalidParameter();\n    }\n    s = n * d;\n  } else if (typeof p1 === \"number\") {\n\n    if (isNaN(p1)) {\n      throw InvalidParameter();\n    }\n\n    if (p1 < 0) {\n      s = -C_ONE;\n      p1 = -p1;\n    }\n\n    if (p1 % 1 === 0) {\n      n = BigInt(p1);\n    } else {\n\n      let z = 1;\n\n      let A = 0, B = 1;\n      let C = 1, D = 1;\n\n      let N = 10000000;\n\n      if (p1 >= 1) {\n        z = 10 ** Math.floor(1 + Math.log10(p1));\n        p1 /= z;\n      }\n\n      // Using Farey Sequences\n\n      while (B <= N && D <= N) {\n        let M = (A + C) / (B + D);\n\n        if (p1 === M) {\n          if (B + D <= N) {\n            n = A + C;\n            d = B + D;\n          } else if (D > B) {\n            n = C;\n            d = D;\n          } else {\n            n = A;\n            d = B;\n          }\n          break;\n\n        } else {\n\n          if (p1 > M) {\n            A += C;\n            B += D;\n          } else {\n            C += A;\n            D += B;\n          }\n\n          if (B > N) {\n            n = C;\n            d = D;\n          } else {\n            n = A;\n            d = B;\n          }\n        }\n      }\n      n = BigInt(n) * BigInt(z);\n      d = BigInt(d);\n    }\n\n  } else if (typeof p1 === \"string\") {\n\n    let ndx = 0;\n\n    let v = C_ZERO, w = C_ZERO, x = C_ZERO, y = C_ONE, z = C_ONE;\n\n    let match = p1.replace(/_/g, '').match(/\\d+|./g);\n\n    if (match === null)\n      throw InvalidParameter();\n\n    if (match[ndx] === '-') {// Check for minus sign at the beginning\n      s = -C_ONE;\n      ndx++;\n    } else if (match[ndx] === '+') {// Check for plus sign at the beginning\n      ndx++;\n    }\n\n    if (match.length === ndx + 1) { // Check if it's just a simple number \"1234\"\n      w = assign(match[ndx++], s);\n    } else if (match[ndx + 1] === '.' || match[ndx] === '.') { // Check if it's a decimal number\n\n      if (match[ndx] !== '.') { // Handle 0.5 and .5\n        v = assign(match[ndx++], s);\n      }\n      ndx++;\n\n      // Check for decimal places\n      if (ndx + 1 === match.length || match[ndx + 1] === '(' && match[ndx + 3] === ')' || match[ndx + 1] === \"'\" && match[ndx + 3] === \"'\") {\n        w = assign(match[ndx], s);\n        y = C_TEN ** BigInt(match[ndx].length);\n        ndx++;\n      }\n\n      // Check for repeating places\n      if (match[ndx] === '(' && match[ndx + 2] === ')' || match[ndx] === \"'\" && match[ndx + 2] === \"'\") {\n        x = assign(match[ndx + 1], s);\n        z = C_TEN ** BigInt(match[ndx + 1].length) - C_ONE;\n        ndx += 3;\n      }\n\n    } else if (match[ndx + 1] === '/' || match[ndx + 1] === ':') { // Check for a simple fraction \"123/456\" or \"123:456\"\n      w = assign(match[ndx], s);\n      y = assign(match[ndx + 2], C_ONE);\n      ndx += 3;\n    } else if (match[ndx + 3] === '/' && match[ndx + 1] === ' ') { // Check for a complex fraction \"123 1/2\"\n      v = assign(match[ndx], s);\n      w = assign(match[ndx + 2], s);\n      y = assign(match[ndx + 4], C_ONE);\n      ndx += 5;\n    }\n\n    if (match.length <= ndx) { // Check for more tokens on the stack\n      d = y * z;\n      s = /* void */\n        n = x + d * v + z * w;\n    } else {\n      throw InvalidParameter();\n    }\n\n  } else if (typeof p1 === \"bigint\") {\n    n = p1;\n    s = p1;\n    d = C_ONE;\n  } else {\n    throw InvalidParameter();\n  }\n\n  if (d === C_ZERO) {\n    throw DivisionByZero();\n  }\n\n  P[\"s\"] = s < C_ZERO ? -C_ONE : C_ONE;\n  P[\"n\"] = n < C_ZERO ? -n : n;\n  P[\"d\"] = d < C_ZERO ? -d : d;\n};\n\nfunction modpow(b, e, m) {\n\n  let r = C_ONE;\n  for (; e > C_ZERO; b = (b * b) % m, e >>= C_ONE) {\n\n    if (e & C_ONE) {\n      r = (r * b) % m;\n    }\n  }\n  return r;\n}\n\nfunction cycleLen(n, d) {\n\n  for (; d % C_TWO === C_ZERO;\n    d /= C_TWO) {\n  }\n\n  for (; d % C_FIVE === C_ZERO;\n    d /= C_FIVE) {\n  }\n\n  if (d === C_ONE) // Catch non-cyclic numbers\n    return C_ZERO;\n\n  // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\n  // 10^(d-1) % d == 1\n  // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\n  // as we want to translate the numbers to strings.\n\n  let rem = C_TEN % d;\n  let t = 1;\n\n  for (; rem !== C_ONE; t++) {\n    rem = rem * C_TEN % d;\n\n    if (t > MAX_CYCLE_LEN)\n      return C_ZERO; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\n  }\n  return BigInt(t);\n}\n\nfunction cycleStart(n, d, len) {\n\n  let rem1 = C_ONE;\n  let rem2 = modpow(C_TEN, len, d);\n\n  for (let t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)\n    // Solve 10^s == 10^(s+t) (mod d)\n\n    if (rem1 === rem2)\n      return BigInt(t);\n\n    rem1 = rem1 * C_TEN % d;\n    rem2 = rem2 * C_TEN % d;\n  }\n  return 0;\n}\n\nfunction gcd(a, b) {\n\n  if (!a)\n    return b;\n  if (!b)\n    return a;\n\n  while (1) {\n    a %= b;\n    if (!a)\n      return b;\n    b %= a;\n    if (!b)\n      return a;\n  }\n}\n\n/**\n * Module constructor\n *\n * @constructor\n * @param {number|Fraction=} a\n * @param {number=} b\n */\nfunction Fraction(a, b) {\n\n  parse(a, b);\n\n  if (this instanceof Fraction) {\n    a = gcd(P[\"d\"], P[\"n\"]); // Abuse a\n    this[\"s\"] = P[\"s\"];\n    this[\"n\"] = P[\"n\"] / a;\n    this[\"d\"] = P[\"d\"] / a;\n  } else {\n    return newFraction(P['s'] * P['n'], P['d']);\n  }\n}\n\nvar DivisionByZero = function () { return new Error(\"Division by Zero\"); };\nvar InvalidParameter = function () { return new Error(\"Invalid argument\"); };\nvar NonIntegerParameter = function () { return new Error(\"Parameters must be integer\"); };\n\nFraction.prototype = {\n\n  \"s\": C_ONE,\n  \"n\": C_ZERO,\n  \"d\": C_ONE,\n\n  /**\n   * Calculates the absolute value\n   *\n   * Ex: new Fraction(-4).abs() => 4\n   **/\n  \"abs\": function () {\n\n    return newFraction(this[\"n\"], this[\"d\"]);\n  },\n\n  /**\n   * Inverts the sign of the current fraction\n   *\n   * Ex: new Fraction(-4).neg() => 4\n   **/\n  \"neg\": function () {\n\n    return newFraction(-this[\"s\"] * this[\"n\"], this[\"d\"]);\n  },\n\n  /**\n   * Adds two rational numbers\n   *\n   * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\n   **/\n  \"add\": function (a, b) {\n\n    parse(a, b);\n    return newFraction(\n      this[\"s\"] * this[\"n\"] * P[\"d\"] + P[\"s\"] * this[\"d\"] * P[\"n\"],\n      this[\"d\"] * P[\"d\"]\n    );\n  },\n\n  /**\n   * Subtracts two rational numbers\n   *\n   * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\n   **/\n  \"sub\": function (a, b) {\n\n    parse(a, b);\n    return newFraction(\n      this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * this[\"d\"] * P[\"n\"],\n      this[\"d\"] * P[\"d\"]\n    );\n  },\n\n  /**\n   * Multiplies two rational numbers\n   *\n   * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\n   **/\n  \"mul\": function (a, b) {\n\n    parse(a, b);\n    return newFraction(\n      this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"n\"],\n      this[\"d\"] * P[\"d\"]\n    );\n  },\n\n  /**\n   * Divides two rational numbers\n   *\n   * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\n   **/\n  \"div\": function (a, b) {\n\n    parse(a, b);\n    return newFraction(\n      this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"d\"],\n      this[\"d\"] * P[\"n\"]\n    );\n  },\n\n  /**\n   * Clones the actual object\n   *\n   * Ex: new Fraction(\"-17.(345)\").clone()\n   **/\n  \"clone\": function () {\n    return newFraction(this['s'] * this['n'], this['d']);\n  },\n\n  /**\n   * Calculates the modulo of two rational numbers - a more precise fmod\n   *\n   * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\n   * Ex: new Fraction(20, 10).mod().equals(0) ? \"is Integer\"\n   **/\n  \"mod\": function (a, b) {\n\n    if (a === undefined) {\n      return newFraction(this[\"s\"] * this[\"n\"] % this[\"d\"], C_ONE);\n    }\n\n    parse(a, b);\n    if (C_ZERO === P[\"n\"] * this[\"d\"]) {\n      throw DivisionByZero();\n    }\n\n    /**\n     * I derived the rational modulo similar to the modulo for integers\n     *\n     * https://raw.org/book/analysis/rational-numbers/\n     *\n     *    n1/d1 = (n2/d2) * q + r, where 0 ≤ r < n2/d2\n     * => d2 * n1 = n2 * d1 * q + d1 * d2 * r\n     * => r = (d2 * n1 - n2 * d1 * q) / (d1 * d2)\n     *      = (d2 * n1 - n2 * d1 * floor((d2 * n1) / (n2 * d1))) / (d1 * d2)\n     *      = ((d2 * n1) % (n2 * d1)) / (d1 * d2)\n     */\n    return newFraction(\n      this[\"s\"] * (P[\"d\"] * this[\"n\"]) % (P[\"n\"] * this[\"d\"]),\n      P[\"d\"] * this[\"d\"]);\n  },\n\n  /**\n   * Calculates the fractional gcd of two rational numbers\n   *\n   * Ex: new Fraction(5,8).gcd(3,7) => 1/56\n   */\n  \"gcd\": function (a, b) {\n\n    parse(a, b);\n\n    // https://raw.org/book/analysis/rational-numbers/\n    // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\n\n    return newFraction(gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]), P[\"d\"] * this[\"d\"]);\n  },\n\n  /**\n   * Calculates the fractional lcm of two rational numbers\n   *\n   * Ex: new Fraction(5,8).lcm(3,7) => 15\n   */\n  \"lcm\": function (a, b) {\n\n    parse(a, b);\n\n    // https://raw.org/book/analysis/rational-numbers/\n    // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\n\n    if (P[\"n\"] === C_ZERO && this[\"n\"] === C_ZERO) {\n      return newFraction(C_ZERO, C_ONE);\n    }\n    return newFraction(P[\"n\"] * this[\"n\"], gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]));\n  },\n\n  /**\n   * Gets the inverse of the fraction, means numerator and denominator are exchanged\n   *\n   * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\n   **/\n  \"inverse\": function () {\n    return newFraction(this[\"s\"] * this[\"d\"], this[\"n\"]);\n  },\n\n  /**\n   * Calculates the fraction to some integer exponent\n   *\n   * Ex: new Fraction(-1,2).pow(-3) => -8\n   */\n  \"pow\": function (a, b) {\n\n    parse(a, b);\n\n    // Trivial case when exp is an integer\n\n    if (P['d'] === C_ONE) {\n\n      if (P['s'] < C_ZERO) {\n        return newFraction((this['s'] * this[\"d\"]) ** P['n'], this[\"n\"] ** P['n']);\n      } else {\n        return newFraction((this['s'] * this[\"n\"]) ** P['n'], this[\"d\"] ** P['n']);\n      }\n    }\n\n    // Negative roots become complex\n    //     (-a/b)^(c/d) = x\n    // ⇔ (-1)^(c/d) * (a/b)^(c/d) = x\n    // ⇔ (cos(pi) + i*sin(pi))^(c/d) * (a/b)^(c/d) = x\n    // ⇔ (cos(c*pi/d) + i*sin(c*pi/d)) * (a/b)^(c/d) = x       # DeMoivre's formula\n    // From which follows that only for c=0 the root is non-complex\n    if (this['s'] < C_ZERO) return null;\n\n    // Now prime factor n and d\n    let N = factorize(this['n']);\n    let D = factorize(this['d']);\n\n    // Exponentiate and take root for n and d individually\n    let n = C_ONE;\n    let d = C_ONE;\n    for (let k in N) {\n      if (k === '1') continue;\n      if (k === '0') {\n        n = C_ZERO;\n        break;\n      }\n      N[k] *= P['n'];\n\n      if (N[k] % P['d'] === C_ZERO) {\n        N[k] /= P['d'];\n      } else return null;\n      n *= BigInt(k) ** N[k];\n    }\n\n    for (let k in D) {\n      if (k === '1') continue;\n      D[k] *= P['n'];\n\n      if (D[k] % P['d'] === C_ZERO) {\n        D[k] /= P['d'];\n      } else return null;\n      d *= BigInt(k) ** D[k];\n    }\n\n    if (P['s'] < C_ZERO) {\n      return newFraction(d, n);\n    }\n    return newFraction(n, d);\n  },\n\n  /**\n   * Calculates the logarithm of a fraction to a given rational base\n   *\n   * Ex: new Fraction(27, 8).log(9, 4) => 3/2\n   */\n  \"log\": function (a, b) {\n\n    parse(a, b);\n\n    if (this['s'] <= C_ZERO || P['s'] <= C_ZERO) return null;\n\n    const allPrimes = {};\n\n    const baseFactors = factorize(P['n']);\n    const T1 = factorize(P['d']);\n\n    const numberFactors = factorize(this['n']);\n    const T2 = factorize(this['d']);\n\n    for (const prime in T1) {\n      baseFactors[prime] = (baseFactors[prime] || C_ZERO) - T1[prime];\n    }\n    for (const prime in T2) {\n      numberFactors[prime] = (numberFactors[prime] || C_ZERO) - T2[prime];\n    }\n\n    for (const prime in baseFactors) {\n      if (prime === '1') continue;\n      allPrimes[prime] = true;\n    }\n    for (const prime in numberFactors) {\n      if (prime === '1') continue;\n      allPrimes[prime] = true;\n    }\n\n    let retN = null;\n    let retD = null;\n\n    // Iterate over all unique primes to determine if a consistent ratio exists\n    for (const prime in allPrimes) {\n\n      const baseExponent = baseFactors[prime] || C_ZERO;\n      const numberExponent = numberFactors[prime] || C_ZERO;\n\n      if (baseExponent === C_ZERO) {\n        if (numberExponent !== C_ZERO) {\n          return null; // Logarithm cannot be expressed as a rational number\n        }\n        continue; // Skip this prime since both exponents are zero\n      }\n\n      // Calculate the ratio of exponents for this prime\n      let curN = numberExponent;\n      let curD = baseExponent;\n\n      // Simplify the current ratio\n      const gcdValue = gcd(curN, curD);\n      curN /= gcdValue;\n      curD /= gcdValue;\n\n      // Check if this is the first ratio; otherwise, ensure ratios are consistent\n      if (retN === null && retD === null) {\n        retN = curN;\n        retD = curD;\n      } else if (curN * retD !== retN * curD) {\n        return null; // Ratios do not match, logarithm cannot be rational\n      }\n    }\n\n    return retN !== null && retD !== null\n      ? newFraction(retN, retD)\n      : null;\n  },\n\n  /**\n   * Check if two rational numbers are the same\n   *\n   * Ex: new Fraction(19.6).equals([98, 5]);\n   **/\n  \"equals\": function (a, b) {\n\n    parse(a, b);\n    return this[\"s\"] * this[\"n\"] * P[\"d\"] === P[\"s\"] * P[\"n\"] * this[\"d\"];\n  },\n\n  /**\n   * Check if this rational number is less than another\n   *\n   * Ex: new Fraction(19.6).lt([98, 5]);\n   **/\n  \"lt\": function (a, b) {\n\n    parse(a, b);\n    return this[\"s\"] * this[\"n\"] * P[\"d\"] < P[\"s\"] * P[\"n\"] * this[\"d\"];\n  },\n\n  /**\n   * Check if this rational number is less than or equal another\n   *\n   * Ex: new Fraction(19.6).lt([98, 5]);\n   **/\n  \"lte\": function (a, b) {\n\n    parse(a, b);\n    return this[\"s\"] * this[\"n\"] * P[\"d\"] <= P[\"s\"] * P[\"n\"] * this[\"d\"];\n  },\n\n  /**\n   * Check if this rational number is greater than another\n   *\n   * Ex: new Fraction(19.6).lt([98, 5]);\n   **/\n  \"gt\": function (a, b) {\n\n    parse(a, b);\n    return this[\"s\"] * this[\"n\"] * P[\"d\"] > P[\"s\"] * P[\"n\"] * this[\"d\"];\n  },\n\n  /**\n   * Check if this rational number is greater than or equal another\n   *\n   * Ex: new Fraction(19.6).lt([98, 5]);\n   **/\n  \"gte\": function (a, b) {\n\n    parse(a, b);\n    return this[\"s\"] * this[\"n\"] * P[\"d\"] >= P[\"s\"] * P[\"n\"] * this[\"d\"];\n  },\n\n  /**\n   * Compare two rational numbers\n   * < 0 iff this < that\n   * > 0 iff this > that\n   * = 0 iff this = that\n   *\n   * Ex: new Fraction(19.6).compare([98, 5]);\n   **/\n  \"compare\": function (a, b) {\n\n    parse(a, b);\n    let t = this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * P[\"n\"] * this[\"d\"];\n\n    return (C_ZERO < t) - (t < C_ZERO);\n  },\n\n  /**\n   * Calculates the ceil of a rational number\n   *\n   * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\n   **/\n  \"ceil\": function (places) {\n\n    places = C_TEN ** BigInt(places || 0);\n\n    return newFraction(trunc(this[\"s\"] * places * this[\"n\"] / this[\"d\"]) +\n      (places * this[\"n\"] % this[\"d\"] > C_ZERO && this[\"s\"] >= C_ZERO ? C_ONE : C_ZERO),\n      places);\n  },\n\n  /**\n   * Calculates the floor of a rational number\n   *\n   * Ex: new Fraction('4.(3)').floor() => (4 / 1)\n   **/\n  \"floor\": function (places) {\n\n    places = C_TEN ** BigInt(places || 0);\n\n    return newFraction(trunc(this[\"s\"] * places * this[\"n\"] / this[\"d\"]) -\n      (places * this[\"n\"] % this[\"d\"] > C_ZERO && this[\"s\"] < C_ZERO ? C_ONE : C_ZERO),\n      places);\n  },\n\n  /**\n   * Rounds a rational numbers\n   *\n   * Ex: new Fraction('4.(3)').round() => (4 / 1)\n   **/\n  \"round\": function (places) {\n\n    places = C_TEN ** BigInt(places || 0);\n\n    /* Derivation:\n\n    s >= 0:\n      round(n / d) = trunc(n / d) + (n % d) / d >= 0.5 ? 1 : 0\n                   = trunc(n / d) + 2(n % d) >= d ? 1 : 0\n    s < 0:\n      round(n / d) =-trunc(n / d) - (n % d) / d > 0.5 ? 1 : 0\n                   =-trunc(n / d) - 2(n % d) > d ? 1 : 0\n\n    =>:\n\n    round(s * n / d) = s * trunc(n / d) + s * (C + 2(n % d) > d ? 1 : 0)\n        where C = s >= 0 ? 1 : 0, to fix the >= for the positve case.\n    */\n\n    return newFraction(trunc(this[\"s\"] * places * this[\"n\"] / this[\"d\"]) +\n      this[\"s\"] * ((this[\"s\"] >= C_ZERO ? C_ONE : C_ZERO) + C_TWO * (places * this[\"n\"] % this[\"d\"]) > this[\"d\"] ? C_ONE : C_ZERO),\n      places);\n  },\n\n  /**\n    * Rounds a rational number to a multiple of another rational number\n    *\n    * Ex: new Fraction('0.9').roundTo(\"1/8\") => 7 / 8\n    **/\n  \"roundTo\": function (a, b) {\n\n    /*\n    k * x/y ≤ a/b < (k+1) * x/y\n    ⇔ k ≤ a/b / (x/y) < (k+1)\n    ⇔ k = floor(a/b * y/x)\n    ⇔ k = floor((a * y) / (b * x))\n    */\n\n    parse(a, b);\n\n    const n = this['n'] * P['d'];\n    const d = this['d'] * P['n'];\n    const r = n % d;\n\n    // round(n / d) = trunc(n / d) + 2(n % d) >= d ? 1 : 0\n    let k = trunc(n / d);\n    if (r + r >= d) {\n      k++;\n    }\n    return newFraction(this['s'] * k * P['n'], P['d']);\n  },\n\n  /**\n   * Check if two rational numbers are divisible\n   *\n   * Ex: new Fraction(19.6).divisible(1.5);\n   */\n  \"divisible\": function (a, b) {\n\n    parse(a, b);\n    return !(!(P[\"n\"] * this[\"d\"]) || ((this[\"n\"] * P[\"d\"]) % (P[\"n\"] * this[\"d\"])));\n  },\n\n  /**\n   * Returns a decimal representation of the fraction\n   *\n   * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\n   **/\n  'valueOf': function () {\n    // Best we can do so far\n    return Number(this[\"s\"] * this[\"n\"]) / Number(this[\"d\"]);\n  },\n\n  /**\n   * Creates a string representation of a fraction with all digits\n   *\n   * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\n   **/\n  'toString': function (dec) {\n\n    let N = this[\"n\"];\n    let D = this[\"d\"];\n\n    dec = dec || 15; // 15 = decimal places when no repetition\n\n    let cycLen = cycleLen(N, D); // Cycle length\n    let cycOff = cycleStart(N, D, cycLen); // Cycle start\n\n    let str = this['s'] < C_ZERO ? \"-\" : \"\";\n\n    // Append integer part\n    str += trunc(N / D);\n\n    N %= D;\n    N *= C_TEN;\n\n    if (N)\n      str += \".\";\n\n    if (cycLen) {\n\n      for (let i = cycOff; i--;) {\n        str += trunc(N / D);\n        N %= D;\n        N *= C_TEN;\n      }\n      str += \"(\";\n      for (let i = cycLen; i--;) {\n        str += trunc(N / D);\n        N %= D;\n        N *= C_TEN;\n      }\n      str += \")\";\n    } else {\n      for (let i = dec; N && i--;) {\n        str += trunc(N / D);\n        N %= D;\n        N *= C_TEN;\n      }\n    }\n    return str;\n  },\n\n  /**\n   * Returns a string-fraction representation of a Fraction object\n   *\n   * Ex: new Fraction(\"1.'3'\").toFraction() => \"4 1/3\"\n   **/\n  'toFraction': function (showMixed) {\n\n    let n = this[\"n\"];\n    let d = this[\"d\"];\n    let str = this['s'] < C_ZERO ? \"-\" : \"\";\n\n    if (d === C_ONE) {\n      str += n;\n    } else {\n      let whole = trunc(n / d);\n      if (showMixed && whole > C_ZERO) {\n        str += whole;\n        str += \" \";\n        n %= d;\n      }\n\n      str += n;\n      str += '/';\n      str += d;\n    }\n    return str;\n  },\n\n  /**\n   * Returns a latex representation of a Fraction object\n   *\n   * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\n   **/\n  'toLatex': function (showMixed) {\n\n    let n = this[\"n\"];\n    let d = this[\"d\"];\n    let str = this['s'] < C_ZERO ? \"-\" : \"\";\n\n    if (d === C_ONE) {\n      str += n;\n    } else {\n      let whole = trunc(n / d);\n      if (showMixed && whole > C_ZERO) {\n        str += whole;\n        n %= d;\n      }\n\n      str += \"\\\\frac{\";\n      str += n;\n      str += '}{';\n      str += d;\n      str += '}';\n    }\n    return str;\n  },\n\n  /**\n   * Returns an array of continued fraction elements\n   *\n   * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\n   */\n  'toContinued': function () {\n\n    let a = this['n'];\n    let b = this['d'];\n    let res = [];\n\n    do {\n      res.push(trunc(a / b));\n      let t = a % b;\n      a = b;\n      b = t;\n    } while (a !== C_ONE);\n\n    return res;\n  },\n\n  \"simplify\": function (eps) {\n\n    const ieps = BigInt(1 / (eps || 0.001) | 0);\n\n    const thisABS = this['abs']();\n    const cont = thisABS['toContinued']();\n\n    for (let i = 1; i < cont.length; i++) {\n\n      let s = newFraction(cont[i - 1], C_ONE);\n      for (let k = i - 2; k >= 0; k--) {\n        s = s['inverse']()['add'](cont[k]);\n      }\n\n      let t = s['sub'](thisABS);\n      if (t['n'] * ieps < t['d']) { // More robust than Math.abs(t.valueOf()) < eps\n        return s['mul'](this['s']);\n      }\n    }\n    return this;\n  }\n};\nexport {\n  Fraction as default, Fraction\n};\n"],
  "mappings": "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",
  "names": []
}
